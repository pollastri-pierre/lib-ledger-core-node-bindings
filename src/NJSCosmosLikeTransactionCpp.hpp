// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from cosmos_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSCOSMOSLIKETRANSACTION_HPP
#define DJINNI_GENERATED_NJSCOSMOSLIKETRANSACTION_HPP


#include "../include/../utils/optional.hpp"
#include "NJSAmountCpp.hpp"
#include "NJSCosmosLikeAddressCpp.hpp"
#include <chrono>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../include/CosmosLikeTransaction.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSCosmosLikeTransaction final {
public:

    static void Initialize(Local<Object> target);
    NJSCosmosLikeTransaction() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::CosmosLikeTransaction> &object);
    static Nan::Persistent<ObjectTemplate> CosmosLikeTransaction_prototype;

private:
    /** Get the hash of the transaction. */
    static NAN_METHOD(getHash);

    /** Get Fees (in drop) */
    static NAN_METHOD(getFees);

    /** Get destination Cosmos. address */
    static NAN_METHOD(getReceiver);

    /** Get Cosmos. sender address */
    static NAN_METHOD(getSender);

    /** Get amount of Cosmos to send */
    static NAN_METHOD(getValue);

    /** Serialize the transaction to its JSON format. */
    static NAN_METHOD(serialize);

    /** Set signature of transaction, when a signature is set serialize method gives back serialized Tx */
    static NAN_METHOD(setSignature);

    static NAN_METHOD(setDERSignature);

    /**
     * Get the time when the transaction was issued or the time of the block including
     * this transaction
     */
    static NAN_METHOD(getDate);

    /** Get Signing public Key */
    static NAN_METHOD(getSigningPubKey);

    static NAN_METHOD(getGasLimit);

    static NAN_METHOD(getGasPrice);

    static NAN_METHOD(getGasAdjustment);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSCOSMOSLIKETRANSACTION_HPP
